(in-package :logsniper.logBlog)

(defun login-response-json ()
  (with-cookie-user (cookie-userinfo)
    (with-output-to-string (stream)
      (let* ((password (hunchentoot:post-parameter "password"))
             (email (hunchentoot:post-parameter "email"))
             (userinfo (query-userinfo-by-email email)))
        (if (check-authentication userinfo password)
          (progn (update-user-info-cookie userinfo)
                 (setf (last-time userinfo) (get-universal-time))
                 (setf (last-ip userinfo) (hunchentoot:real-remote-addr))
                 (format stream "{\"status\":\"11\"}"))
          (format stream "{\"status\":\"~a\"}" (if userinfo 12 13))))
      stream)))

(defun cancel-unread-message ()
  (with-cookie-user (cookie-userinfo)
    (if cookie-userinfo
      (with-output-to-string (stream)
        (let ((msgid (string-to-int (hunchentoot:get-parameter "msgid"))))
          (setf (new-reply cookie-userinfo)
                (remove-given-value-from-list (new-reply cookie-userinfo) msgid)))
        (format stream "{\"unread_num\": ~a}" (length (new-reply cookie-userinfo)))))))

(defun ajax-submit-message-response ()
  (with-cookie-user (userinfo)
    (let ((blog (get-blog (string-to-int (hunchentoot:post-parameter "blogid")))))
      (if blog
        (let* ((new-msg (add-message (hunchentoot:post-parameter "content")
                                     (hunchentoot:real-remote-addr)
                                     (blogid blog)))
               (replied-msgid (string-to-int (hunchentoot:post-parameter "rpmsg")))
               (replied-msg (get-message replied-msgid))) 
          (if new-msg
            (if (and replied-msgid replied-msg)
              (progn
                (push new-msg (repliers replied-msg))
                (push (msgid new-msg) (new-reply (query-userinfo-by-email (email replied-msg)))))
              (push new-msg (messages blog))))
          (log-info "[reply-info]isreply:~a,replied_author:~a" (and new-msg replied-msgid replied-msg) (if replied-msg (author replied-msg) nil))
          (recursively-decorate-message new-msg :depth (string-to-int (hunchentoot:post-parameter "hierarchy"))))))))

(defun mark-all-unread-messages ()
  (with-cookie-user (userinfo)
    (if userinfo
      (setf (new-reply userinfo) ()))
    "{\"status\": \"success\"}"))

(defun check-update ()
  (with-cookie-user (userinfo)
    (with-output-to-string (stream)
      (let ((unread_num 0)
            (has_new_msg 0)
            (latest_msg_id (string-to-int (hunchentoot:post-parameter "latest_msg_id"))))
        (if userinfo (setf unread_num (length (new-reply userinfo))))
        (if (and (car (get-all-messages)) (not (equal latest_msg_id (msgid (car (get-all-messages))))))
            (setf has_new_msg 1))
        (format stream "{\"unread_num\": ~a, \"has_new_msg\": ~a, \"active_user_num\": ~a}" unread_num has_new_msg *active-user-num*)
        stream))))

(defun check-email-p ()
  (with-output-to-string (stream)
    (let ((email (hunchentoot:post-parameter "email")))
      (format stream "{\"exist\": ~a}" (if (query-userinfo-by-email email) 1 0)))))

(defun check-author-p ()
  (with-output-to-string (stream)
    (let ((author (hunchentoot:post-parameter "author")))
      (format stream "{\"exist\": ~a}" (if (query-userinfo-by-author author) 1 0)))))
